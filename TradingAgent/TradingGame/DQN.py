import torch
import torch.nn as nn
from torch.autograd import Variable
import torch.nn.functional as F
import numpy as np
import statistics
from copy import deepcopy
import os
from collections import OrderedDict
import torch.tensor as tensor

class Net(nn.Module):
		'''
				建立現實網路(Target Net)及估計網路(Eval Net)
		'''
		def __init__(self, ):
				super(Net, self).__init__()
				self.fc1 = nn.Linear(37, 10) # N_STATES = 37
				self.fc1.weight.data.normal_(0, 0.1)   # initialization
				self.out = nn.Linear(10, 2) # N_ACTIONS = 2
				self.out.weight.data.normal_(0, 0.1)   # initialization

		def forward(self, x):
				x = self.fc1(x)
				x = F.relu(x)
				actions_value = self.out(x)
				return actions_value
		
		def choose_action(self, x):
				x = torch.unsqueeze(torch.FloatTensor(x), 0)
				actions_value = self.forward(x)
				print(actions_value)
				action = np.argmax(actions_value.detach().numpy())     # return the argmax
				#print(action)
				
				return action

def adviseAction(state, playDuration):
	
	# 將「交易股數」和「交易金額」的單位從「千股」和「千元」改成「股」和「元」，以符合模型輸入的型式
	state[6:19] = [i * 1000 for i in state[6:19]] 
	#print(state)
	
	if playDuration == 60 or playDuration == 5:
		# 標準化狀態變數 (用來標準化的平均數和標準差和訓練模型時用的相同(元大台灣50 2018/10/1~2018/12/28的資料))
		mean_60 = [78.08233333333335,
							 78.62533333333336,
							 79.50137500000001,
							 82.18918055533335,
							 82.62382638916667,
							 82.62973263883332,
							 12980377.98000001,
							 13109216.493333336,
							 13206643.817499997,
							 11660427.317716666,
							 8858807.07171667,
							 7081260.138633332,
							 1020515286.423333,
							 1035102541.8933331,
							 1050930273.4950002,
							 946536519.1033334,
							 724577138.3333335,
							 580011900.4783331,
							 12554183.533333333,
							 77.74249999999999,
							 78.12083333333334,
							 77.2125,
							 77.705,
							 -0.16833333333333336]

		std_60 = [3.347774047549555,
							3.5098897643931917,
							3.6578117423652006,
							2.697304618316148,
							0.6889397930919128,
							0.491906247613929,
							8498635.787508653,
							6736829.7106598,
							5009781.5548914205,
							1970487.0188612188,
							985629.930601265,
							716543.232945966,
							689272671.449235,
							552116427.0513507,
							415147948.0241058,
							142978472.66348475,
							74133293.81544879,
							54598375.58218146,
							12060809.55864161,
							3.1843742567072204,
							3.1479249510074316,
							3.0872705431788217,
							3.0671952074620177,
							1.0851449433244387]

		state[:24] = [(a - b) / c for a, b, c in zip(state[:24], mean_60, std_60)]
		#print(state)

		#print(state)

		# 讀取60天的參數
		param = OrderedDict([('fc1.weight', tensor([
			[ 0.1385,  0.1806, -0.1879,  0.0909,  0.0034, -0.0207,  0.0487,  0.0309,
			 -0.0618, -0.0389,  0.0304, -0.1494, -0.0629,  0.0795,  0.0104, -0.0059,
			 -0.0704,  0.2013,  0.0690, -0.0538,  0.0369, -0.0793, -0.0234, -0.2470,
			  0.0582, -0.0125, -0.0461,  0.1976, -0.0257,  0.0293, -0.3111,  0.0795,
			  0.0820, -0.0227,  0.0156,  0.0565,  0.0788],
			[ 0.2050,  0.0738, -0.2438,  0.0974,  0.0352,  0.0576,  0.0055,  0.0863,
			  0.1245, -0.1136,  0.0596,  0.0410, -0.1124, -0.0468,  0.1498,  0.0178,
			  0.1947, -0.0505, -0.0071,  0.1259, -0.0529, -0.0847, -0.0231, -0.0621,
			  0.0435, -0.0663,  0.1188,  0.1434, -0.0072, -0.0606,  0.2746,  0.0756,
			  0.0127,  0.0914, -0.0663,  0.0467, -0.1301],
			[ 0.1051, -0.1550,  0.0895,  0.0389, -0.0942,  0.0373, -0.1938, -0.0529,
			 -0.1689, -0.1072,  0.1418,  0.0789,  0.2368, -0.0298,  0.0098, -0.0954,
			 -0.0294, -0.0782,  0.0241,  0.0031,  0.0363, -0.0017,  0.0481, -0.0055,
			 -0.0706, -0.1025,  0.0134, -0.1331, -0.0612,  0.0220, -0.0816, -0.2070,
			  0.0397,  0.0343, -0.0456, -0.0524, -0.0262],
			[ 0.0770,  0.0591,  0.0160,  0.0235,  0.0838,  0.0258, -0.0872, -0.0312,
			 -0.1100,  0.0357, -0.1065,  0.0214, -0.0200,  0.0513,  0.0957, -0.0901,
			  0.1638, -0.2221,  0.0110,  0.0213, -0.1107,  0.1837, -0.2268, -0.0216,
			 -0.0919,  0.0748, -0.0032,  0.0099, -0.0165, -0.0181, -0.0644,  0.1056,
			 -0.2232,  0.0366, -0.1749,  0.0226,  0.0043],
			[ 0.0128,  0.0838, -0.0879,  0.0916, -0.1043, -0.0385,  0.0236,  0.0773,
			 -0.1637,  0.0393,  0.0752,  0.2007, -0.1422,  0.0208,  0.0847, -0.1518,
			 -0.1693,  0.0439, -0.0900,  0.0370, -0.1027, -0.0618,  0.2541,  0.0402,
			 -0.0593,  0.1193, -0.0688,  0.0233,  0.1193, -0.1929, -0.1001,  0.0752,
			  0.1026,  0.1036,  0.1966, -0.0197, -0.0540],
			[-0.0905, -0.0101,  0.0590, -0.0555, -0.0028,  0.0837,  0.0291, -0.0943,
			  0.0256,  0.0370, -0.0357, -0.2016, -0.0990, -0.0448,  0.2280,  0.1689,
			 -0.0415,  0.0448, -0.0420,  0.0078,  0.0433,  0.0459,  0.0272,  0.0005,
			  0.2703, -0.0521, -0.0339, -0.0690, -0.0692,  0.0828, -0.0605, -0.1743,
			  0.0150, -0.2540, -0.0732,  0.0251, -0.1399],
			[ 0.1702,  0.0904,  0.1098, -0.0200, -0.1061, -0.0619,  0.0219,  0.0686,
			 -0.0369, -0.0128,  0.0029, -0.1778,  0.1366,  0.1503, -0.1434,  0.0275,
			  0.0416,  0.1035,  0.0067, -0.1002, -0.0328,  0.0130,  0.1279, -0.0638,
			 -0.0120, -0.0591,  0.0566,  0.0466,  0.1932, -0.0160,  0.1487, -0.0487,
			  0.0868, -0.1527, -0.0090,  0.0704, -0.0083],
			[-0.1950, -0.1801,  0.1904,  0.0452,  0.0923,  0.0155,  0.0900,  0.0540,
			 -0.1537, -0.0486,  0.1069, -0.1191, -0.0955, -0.0990, -0.0072, -0.0874,
			 -0.0936, -0.0206,  0.0128,  0.1311, -0.0012,  0.0357,  0.1360,  0.0168,
			 -0.0098, -0.1365,  0.0842,  0.0124, -0.1609,  0.0092, -0.1410,  0.0782,
			  0.0152,  0.0161, -0.0017,  0.0301, -0.1098],
			[-0.0266, -0.0133, -0.1507,  0.0046, -0.0812,  0.0131,  0.0620,  0.0986,
			  0.1184, -0.0663, -0.0421, -0.0008, -0.1325, -0.1165,  0.0663, -0.0633,
			  0.1262,  0.0921,  0.0149, -0.1429, -0.0122,  0.0626, -0.0069, -0.0276,
			  0.0576,  0.0268, -0.0434,  0.2185,  0.1235, -0.0163,  0.0196,  0.0946,
			 -0.1456, -0.0565,  0.1230, -0.0563, -0.1032],
			[ 0.1149, -0.1628,  0.0205,  0.0685, -0.1046, -0.0778, -0.0767, -0.1091,
			 -0.0309, -0.0741,  0.0083,  0.1650, -0.0875, -0.0413,  0.0755,  0.0031,
			 -0.0028,  0.1639, -0.1910, -0.0792, -0.2276,  0.0198, -0.0196, -0.0465,
			 -0.1927,  0.0398, -0.1484, -0.0516,  0.0671,  0.0454,  0.0321,  0.0074,
			  0.0085, -0.0630, -0.0306, -0.0363,  0.0061]])), 
			('fc1.bias', tensor([-0.1229, -0.0424, -0.0801, -0.1207,  0.1426, -0.0276,  0.0446, -0.0858,
			 0.0193, -0.1050])), 
			('out.weight', tensor([[-0.0341, -0.0274, -0.0116,  0.0629, -0.0493, -0.0220,  0.0978,  0.0790,
			  0.0974,  0.0236],
			[-0.0398, -0.0498,  0.0714, -0.0102, -0.1233,  0.0712,  0.1273,  0.0818,
			  0.0119,  0.1265]])), 
			('out.bias', tensor([-0.0083, -0.0058]))])

					
	elif playDuration == 240:

		# 標準化狀態變數 (用來標準化的平均數和標準差和訓練模型時用的相同(元大台灣50 2018/1/2~2018/12/28的資料))

		mean_240 = [79.42135135135139,
								79.72108108108108,
								80.24050675675677,
								82.42286036013516,
								82.68012387418918,
								82.0539611485135,
								11537589.789189195,
								11487967.02702703,
								11549561.317567565,
								10138967.630810812,
								7868577.8842972955,
								6448618.183972973,
								913809474.6999998,
								912162208.0270268,
								922540087.4256757,
								824468010.8864865,
								644253770.8013514,
								526401241.5472971,
								11215215.027027028,
								79.15608108108107,
								79.53918918918922,
								78.67162162162163,
								79.14729729729731,
								-0.11689189189189189]

		std_240 = [4.212543995729547,
							4.007139456454291,
							3.7021746658961185,
							2.4739819955514677,
							0.6368319303483394,
							1.2915998469623724,
							8216028.703668517,
							6944954.947685839,
							5681301.2581617525,
							3634270.761978022,
							2246682.1990809734,
							1467613.2219774378,
							658928976.1350849,
							559644435.928114,
							459874420.3677312,
							285232307.9555328,
							180255601.3700861,
							122058910.03669365,
							11210836.724297745,
							4.195667634291995,
							4.184751103630128,
							4.194484972393595,
							4.161811808196272,
							1.0080931758355647]

		state[:24] = [(a - b) / c for a, b, c in zip(state[:24], mean_240, std_240)]
		#print(state)

		# 讀取240天的參數
		param = OrderedDict([('fc1.weight', tensor([
			[ 0.0833, -0.1374, -0.1219,  0.0506,  0.1195, -0.0102, -0.0616, -0.0501,
			  0.0386,  0.1056, -0.1139, -0.0420,  0.1217, -0.0608, -0.0377, -0.1151,
			  0.0209,  0.0351, -0.0385, -0.0184,  0.0548, -0.0920,  0.1324, -0.0703,
			 -0.0253, -0.1746,  0.0594, -0.0814,  0.1149, -0.0816,  0.1412, -0.0194,
			 -0.1736, -0.0624, -0.0769, -0.0504,  0.0125],
			[ 0.0166,  0.0901, -0.0158, -0.0723, -0.0083, -0.0055,  0.1730,  0.0472,
			  0.0022,  0.0845, -0.0243, -0.0504, -0.0950,  0.0929, -0.0518,  0.0806,
			  0.0660,  0.0188,  0.0193,  0.0517, -0.0487, -0.0459,  0.0217,  0.0950,
			 -0.0418,  0.0497, -0.0474,  0.0209, -0.1054, -0.1378, -0.0708,  0.0741,
			 -0.0982, -0.0315, -0.0391,  0.0510,  0.0202],
			[ 0.0748, -0.0780, -0.0239, -0.1144,  0.0954,  0.1092, -0.1411,  0.0642,
			 -0.0057, -0.0599, -0.2270,  0.0829,  0.0110,  0.0185, -0.1481, -0.0768,
			 -0.0681, -0.1190, -0.0802, -0.0274, -0.0419,  0.0128, -0.0524,  0.0252,
			  0.0365, -0.0165,  0.1245, -0.0075,  0.0995,  0.0625,  0.0658, -0.1476,
			 -0.0688, -0.0811,  0.0253,  0.0989, -0.0293],
			[ 0.0035,  0.1649,  0.0380, -0.1775,  0.0619, -0.0582,  0.2061,  0.0517,
			 -0.0252,  0.1266,  0.1217,  0.0433, -0.0845, -0.0870,  0.1014, -0.0248,
			  0.0153,  0.1003, -0.0337, -0.0696, -0.0189,  0.0998,  0.0773,  0.0254,
			  0.0146, -0.0089, -0.2170, -0.0651, -0.0430, -0.0900,  0.0732,  0.1031,
			  0.0003,  0.1070,  0.0681,  0.0749, -0.0245],
			[ 0.0074,  0.0122,  0.0802,  0.0825, -0.0254, -0.0819,  0.2228, -0.1309,
			  0.1473, -0.0068,  0.0643,  0.0368,  0.1335,  0.0439, -0.1283,  0.0774,
			  0.0572, -0.0941,  0.0007,  0.0385,  0.0090,  0.0909, -0.1156,  0.0286,
			  0.1161, -0.0560, -0.1143,  0.0812,  0.1160,  0.0334,  0.0447, -0.0753,
			 -0.0596, -0.0440,  0.1202, -0.1357,  0.0101],
			[ 0.0899,  0.0522, -0.0737, -0.1510,  0.0697, -0.1022, -0.0180,  0.1707,
			  0.0192, -0.0044,  0.0083,  0.0977,  0.0898, -0.1562, -0.1616,  0.1689,
			 -0.0784,  0.1589,  0.0089, -0.0319, -0.0799, -0.0276,  0.0036, -0.0206,
			 -0.0089, -0.0265, -0.0065,  0.0235, -0.0843, -0.0679, -0.1270,  0.0368,
			 -0.0894, -0.1233,  0.0573,  0.1608, -0.0716],
			[ 0.0628, -0.2187,  0.0069, -0.0673, -0.0135,  0.0875, -0.1577,  0.0982,
			  0.0506,  0.0249, -0.1696, -0.0701, -0.1360, -0.0218,  0.0835,  0.1333,
			  0.0762, -0.0395,  0.1766, -0.0876,  0.1420,  0.1133, -0.0276,  0.0500,
			 -0.1292,  0.0586,  0.2383,  0.0103,  0.1633, -0.0604,  0.0881, -0.0094,
			 -0.0577,  0.1829,  0.1358, -0.1129,  0.0921],
			[ 0.0333, -0.0613,  0.1269, -0.0531, -0.1092,  0.0752, -0.1195,  0.1006,
			  0.1047, -0.0188,  0.0884,  0.1169,  0.1297,  0.0497,  0.0149,  0.0921,
			  0.0134,  0.0232, -0.0565,  0.0010, -0.0390,  0.1508,  0.1420,  0.0968,
			  0.1585,  0.1102, -0.1275, -0.2211,  0.0197,  0.0157, -0.0366, -0.0242,
			  0.1283,  0.2413, -0.0417, -0.0580,  0.0932],
			[ 0.0433,  0.1646, -0.1391,  0.0292, -0.1105, -0.2019,  0.0809,  0.0291,
			 -0.0660, -0.0489,  0.0078,  0.0501, -0.1344,  0.1042,  0.1302,  0.0168,
			 -0.1365,  0.0670,  0.0463, -0.0369, -0.1107, -0.0929,  0.0371,  0.0600,
			  0.1520,  0.0265,  0.0013, -0.1291, -0.2604,  0.0181, -0.0063, -0.1096,
			  0.0135,  0.0648, -0.2605, -0.0305,  0.0296],
			[-0.0222,  0.0139, -0.0330, -0.0474,  0.1890,  0.1032, -0.0626, -0.0780,
			 -0.0125,  0.0861, -0.1032, -0.0745,  0.1020,  0.0666,  0.0587,  0.0537,
			  0.0907, -0.0036, -0.1094,  0.0632,  0.0510, -0.1190,  0.1113,  0.0931,
			 -0.0038,  0.0610, -0.0402, -0.1945,  0.1440, -0.0891, -0.0401,  0.0632,
			  0.0079, -0.1041, -0.0989, -0.0713,  0.0271]])), 
			('fc1.bias', tensor([-0.0825,  0.0445,  0.1058, -0.0669, -0.0538, -0.0931,  0.0955, -0.0665,
			-0.1073,  0.0224])), 
			('out.weight', tensor([[ 0.0411, -0.0866,  0.1059, -0.0883,  0.0781,  0.0143,  0.0154,  0.1041,
			 -0.0039, -0.0392],
			[ 0.0456,  0.0354,  0.0271,  0.1046, -0.0653, -0.0916, -0.0093, -0.0566,
			  0.0202,  0.0312]])), 
			('out.bias', tensor([-0.1503, -0.1122]))])

	#abs_path = os.path.join(os.path.dirname(os.path.realpath(__file__)), 'params_top50Return_Linear.pkl')
	#param_list50 = torch.load('params_top50Return_Linear.pkl')
	#param_list50 = torch.load('abs_path')

	"""
	param = OrderedDict([('fc1.weight',
							tensor([[ 0.1158, -0.0988,  0.0720,  0.2408,  0.0421, -0.1349, -0.0247, -0.0283],
											[ 0.0687, -0.0295, -0.1720, -0.1260, -0.3383, -0.1223, -0.0508,  0.0681],
											[-0.0600, -0.0783,  0.0301, -0.0246, -0.1391,  0.1548,  0.0292, -0.1311],
											[-0.0360, -0.0857,  0.0505,  0.2222, -0.1010, -0.1674,  0.0695, -0.1696],
											[-0.0989,  0.0587, -0.0901, -0.0404, -0.0952,  0.1623,  0.0679,  0.0023],
											[-0.1824,  0.0544, -0.1328,  0.1459, -0.1539, -0.0407,  0.0618,  0.0925],
											[-0.0017,  0.1142, -0.2593, -0.0378,  0.1240,  0.2351,  0.2373,  0.0864],
											[ 0.0843,  0.1238, -0.1252, -0.1437, -0.0084,  0.1250, -0.0294,  0.0134],
											[-0.0741, -0.0639,  0.0489, -0.0714, -0.1792,  0.0922,  0.0653,  0.0888],
											[ 0.0849, -0.0864,  0.0608,  0.2027, -0.1749, -0.1271, -0.1926, -0.0327]])),
						 ('fc1.bias',
							tensor([ 0.1649, -0.2401, -0.1918,  0.3311, -0.1392,  0.0695, -0.1101, -0.2536,
											-0.3651, -0.3548])),
						 ('out.weight',
							tensor([[ 0.1298,  0.0655, -0.0123,  0.1892, -0.1207,  0.2288, -0.0091, -0.0593,
												0.0410,  0.0045],
											[-0.0851,  0.1379, -0.0819,  0.0264, -0.0631,  0.0217,  0.0781,  0.0360,
												0.0648,  0.0026]])),
						 ('out.bias', tensor([-0.1241, -0.0462]))])
	"""


	ddqn = Net()
	ddqn.load_state_dict(param)
	action = ddqn.choose_action(state)
	return action
	
def makeDecision(position, action):
	#print(position, action)
	if position == 0:
		if action == 0:
			decision = '等待'
		else:
			decision = '買入'
	else:
		if action == 0:
			decision = '持有'
		else:
			decision = '賣出'
	#print(decision)
	return decision