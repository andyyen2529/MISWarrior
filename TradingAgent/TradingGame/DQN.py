import torch
import torch.nn as nn
from torch.autograd import Variable
import torch.nn.functional as F
import numpy as np
import statistics
from copy import deepcopy
import os
from collections import OrderedDict
import torch.tensor as tensor

class Net(nn.Module):
		'''
				建立現實網路(Target Net)及估計網路(Eval Net)
		'''
		def __init__(self, ):
				super(Net, self).__init__()
				self.fc1 = nn.Linear(37, 10) # N_STATES = 37
				self.fc1.weight.data.normal_(0, 0.1)   # initialization
				self.out = nn.Linear(10, 2) # N_ACTIONS = 2
				self.out.weight.data.normal_(0, 0.1)   # initialization

		def forward(self, x):
				x = self.fc1(x)
				x = F.relu(x)
				actions_value = self.out(x)
				return actions_value
		
		def choose_action(self, x):
				x = torch.unsqueeze(torch.FloatTensor(x), 0)
				actions_value = self.forward(x)
				#print(actions_value)
				action = np.argmax(actions_value.detach().numpy())     # return the argmax
				#print(action)
				
				return action

def adviseAction(state, playDuration):
	
	# 將「交易股數」和「交易金額」的單位從「千股」和「千元」改成「股」和「元」，以符合模型輸入的型式
	state[6:19] = [i * 1000 for i in state[6:19]] 
	#print(state)
	
	if playDuration == 60 or playDuration == 5:
		# 標準化狀態變數 (用來標準化的平均數和標準差和訓練模型時用的相同(元大台灣50 2018/10/1~2018/12/28的資料))
		mean_60 = [81.71573770491801,
					81.5243442622951,
					81.3875,
					81.60349726819672,
					82.39877732213114,
					82.38759562819669,
					6178547.567213116,
					6306876.714754098,
					6197897.595901641,
					5948100.45270492,
					5634579.419393442,
					4586465.926786885,
					505413521.0098359,
					513666964.1065575,
					503042444.89016396,
					482941626.9622952,
					461590157.04754096,
					376124736.5803279,
					6126551.68852459,
					81.81639344262297,
					82.18114754098362,
					81.49262295081967,
					81.90245901639345,
					0.10491803278688526]

		std_60 = [1.2497005761600042,
					1.0722322802646493,
					0.6639358653765685,
					0.24889012014777076,
					0.17036315445423222,
					0.17597567555706714,
					2772021.42275744,
					2194739.982602509,
					1600361.10804152,
					358421.7485379537,
					295342.7305829922,
					158512.07747013652,
					228966373.16980007,
					177486831.35090417,
					127656319.39940566,
					28986240.821002528,
					23658415.4503156,
					13412840.81833065,
					4228074.582841219,
					1.362862224373011,
					1.3998858267261833,
					1.421819141850028,
					1.441481478361417,
					0.6527317543749492]

		state[:24] = [(a - b) / c for a, b, c in zip(state[:24], mean_60, std_60)]
		#print(state)

		#print(state)

		# 讀取60天的參數
		param = OrderedDict([('fc1.weight', tensor([[-2.7230e-01,  4.2549e-02,  1.1728e-01, -6.3391e-02,  8.1935e-02,
          3.2537e-02,  2.9268e-02, -1.0307e-01,  8.7744e-02,  1.2747e-01,
          1.1085e-01,  7.4901e-02,  1.1288e-01, -5.2518e-02,  6.8520e-02,
         -5.6804e-02,  9.1337e-03, -1.1162e-01, -1.9138e-01, -5.7508e-05,
         -7.1549e-02, -4.8384e-02,  1.3171e-01,  4.1949e-02,  5.0675e-02,
          6.9952e-02, -1.7111e-01, -8.5954e-03, -1.0231e-01,  5.2122e-02,
          2.3677e-02, -7.4295e-03, -1.8679e-01,  1.1094e-01, -1.1035e-01,
         -3.0747e-02, -1.5328e-02],
        [ 1.0777e-01, -3.5358e-02, -7.8868e-02, -9.8699e-02, -6.2428e-02,
         -1.8466e-01,  2.8281e-03, -1.1320e-01,  1.7888e-02,  6.8947e-02,
          5.4400e-02, -2.6763e-02,  5.8979e-02, -1.6463e-03,  1.7165e-01,
          7.8698e-02, -1.7340e-01, -1.7519e-01, -1.2794e-02, -5.1722e-03,
         -1.1266e-02, -6.7615e-03, -6.2878e-02, -2.8364e-02, -5.0634e-02,
         -1.3464e-01, -1.1914e-01, -1.0878e-01,  2.4116e-01,  4.5024e-02,
         -2.4695e-02, -4.3070e-03, -9.4441e-02,  1.7768e-01,  7.8803e-02,
          1.1565e-02, -4.4687e-02],
        [-1.2588e-01, -7.6679e-02, -7.5224e-02,  5.8249e-03, -2.5433e-02,
         -3.4470e-02, -5.6719e-02,  1.4077e-01,  5.4276e-02,  1.1258e-01,
          2.3273e-01, -7.8505e-03, -6.1954e-02,  1.7170e-01,  1.6543e-01,
         -1.7232e-01, -4.5654e-02, -1.2943e-01,  3.8462e-03, -9.4715e-02,
         -5.2236e-02,  6.5184e-02,  6.0355e-02,  1.3805e-01,  1.2663e-01,
         -9.9711e-02, -6.7292e-02, -3.0514e-01,  9.6087e-03,  7.7798e-02,
          1.2311e-01,  8.2746e-02, -1.0630e-01,  1.3435e-01,  5.3540e-02,
          9.5612e-02,  5.0769e-03],
        [ 9.7424e-02, -6.7806e-02,  4.7863e-02, -1.0623e-01, -5.1881e-02,
         -1.1899e-02,  8.6378e-02,  9.6335e-02,  1.2230e-02,  7.7542e-03,
          8.3182e-02,  3.4295e-02,  9.9996e-02,  3.9975e-02, -8.8960e-02,
         -1.9420e-02, -1.3558e-01, -1.1314e-01,  1.5697e-02,  1.2677e-01,
          9.9907e-02, -1.3155e-02, -1.1444e-01,  1.9343e-02, -2.5485e-01,
          1.4519e-01,  3.0976e-02, -1.0908e-02,  7.5840e-02,  5.5522e-02,
         -1.1220e-01,  2.8325e-02, -4.3327e-02,  3.6900e-02, -3.7520e-02,
         -1.4264e-02, -6.4252e-03],
        [ 3.5717e-02, -2.0329e-02,  3.6757e-02,  6.3300e-02, -1.8694e-01,
         -1.9633e-01,  4.6923e-02,  5.4021e-02, -4.9157e-02,  1.2402e-02,
          2.6058e-02, -1.2805e-01, -7.3605e-02,  3.2801e-02, -1.7122e-01,
          1.4873e-01,  1.2432e-01, -2.0977e-01,  1.7289e-02,  1.4320e-01,
         -1.8606e-01,  1.3333e-02, -1.1878e-01,  7.5469e-02,  2.7045e-02,
         -1.1089e-01, -2.4819e-02,  2.1014e-02,  2.4757e-02, -1.6510e-02,
          1.7009e-01, -1.2638e-01,  1.7048e-01, -7.2801e-02, -8.0134e-02,
          4.7658e-03, -1.1253e-01],
        [ 1.0340e-01, -2.6841e-02, -1.6735e-01,  9.8788e-02,  4.3244e-02,
         -1.2286e-01,  2.0384e-02, -6.5421e-02,  6.4310e-02, -1.1428e-01,
         -4.4038e-02, -3.6375e-02,  1.9500e-01, -8.5543e-02,  7.8262e-02,
          8.5711e-02, -1.5163e-01,  1.4374e-01,  1.0840e-01, -1.0332e-01,
          5.6851e-02, -7.2463e-02,  8.1393e-02, -2.4386e-02,  2.5319e-01,
          3.6520e-02,  1.2407e-01,  8.1597e-03, -1.1397e-03, -1.8035e-02,
          1.4668e-02,  2.6557e-02,  5.3494e-02, -6.8302e-02, -1.3718e-01,
         -1.0268e-01, -1.0435e-01],
        [ 1.0196e-01, -5.1848e-02,  1.0273e-01,  5.6589e-02, -2.1536e-01,
          2.7154e-02, -9.8029e-02, -5.8335e-02,  9.6765e-02,  6.7189e-02,
         -8.1723e-02,  8.5315e-02, -2.3679e-02, -1.2697e-01, -1.0673e-01,
          1.0950e-01,  9.3194e-02, -9.0979e-02, -4.0711e-02,  2.2857e-02,
          1.9245e-01,  9.3171e-03,  1.8025e-01, -1.1376e-01,  2.9683e-02,
          3.4797e-03,  1.3797e-01, -2.6046e-02, -1.1803e-01, -9.7306e-02,
         -4.0151e-02, -1.9319e-01,  1.3363e-03, -5.4372e-03, -4.7350e-02,
         -1.8247e-02,  6.4573e-02],
        [-4.1620e-02,  5.0163e-02,  2.2695e-01, -5.1916e-02, -1.1150e-01,
         -3.8365e-03,  1.0716e-01, -7.3510e-02, -9.3516e-02,  7.0096e-02,
         -8.3726e-02, -1.0846e-01,  5.1210e-02, -1.9235e-01, -4.0025e-02,
         -2.4761e-01,  8.9873e-02, -9.0313e-02, -1.1953e-01, -1.6909e-01,
         -1.3546e-01, -4.2693e-02, -8.7618e-02,  7.3553e-02,  1.3320e-01,
          7.4593e-02, -9.6484e-02, -2.5566e-01,  1.4155e-01, -1.0019e-01,
         -3.2017e-02, -4.9825e-03,  2.6208e-02,  1.4175e-01,  9.1712e-02,
         -4.4692e-02, -1.8337e-01],
        [-1.9139e-01, -8.9403e-02, -8.6926e-04, -1.2212e-02, -4.6584e-02,
          2.7656e-02,  1.2263e-01, -8.0744e-03, -1.0515e-01, -9.2147e-02,
          3.1335e-02,  8.9323e-03,  1.4107e-01,  3.3239e-02, -1.4009e-01,
         -2.0667e-01,  6.6551e-02, -9.4813e-02,  6.4404e-02,  1.0553e-01,
         -4.3086e-02,  4.6087e-02, -5.3367e-02,  6.8222e-02, -5.0740e-02,
          2.7226e-02, -5.7262e-02,  9.9534e-02, -6.2612e-02,  1.7528e-01,
          1.3349e-01, -1.5527e-02, -1.1655e-01,  9.9745e-02, -7.8083e-03,
         -7.9756e-02,  1.7702e-01],
        [-2.5171e-02, -1.2619e-01,  6.9717e-02,  1.2764e-02, -2.4346e-04,
         -1.3830e-01, -1.1450e-01, -1.1472e-01, -1.8977e-02,  1.7530e-02,
          3.9100e-02, -1.4504e-01,  1.9608e-01, -1.1762e-01,  4.3963e-02,
         -2.5860e-01,  1.3326e-02,  9.7240e-03, -1.1139e-02, -1.5504e-01,
         -2.1955e-02,  2.8976e-02,  7.5479e-02,  5.2466e-02, -2.2838e-03,
          4.7758e-02, -2.3013e-03, -1.2542e-02,  2.5205e-02, -1.4130e-01,
         -1.2365e-02,  1.1544e-01, -3.7992e-02,  1.3841e-02,  1.7771e-01,
         -4.9433e-02, -3.1737e-02]])), ('fc1.bias', tensor([-0.1029, -0.1032,  0.0702, -0.1650, -0.1751, -0.1054, -0.0390,  0.1399,
         0.0401,  0.0804])), ('out.weight', tensor([[-0.0665,  0.0050, -0.0643,  0.1961,  0.1158, -0.0274, -0.1980, -0.0473,
          0.1056,  0.0816],
        [ 0.0351,  0.1532,  0.1093, -0.1077, -0.1175, -0.0744,  0.1149,  0.1675,
          0.0878,  0.0193]])), ('out.bias', tensor([ 0.1086, -0.1063]))])

					
	elif playDuration == 240:

		# 標準化狀態變數 (用來標準化的平均數和標準差和訓練模型時用的相同(元大台灣50 2018/1/2~2018/12/28的資料))

		mean_240 = [82.52792531120332,
					82.5164522821577,
					82.51334024896266,
					82.35187067788381,
					81.65149550477179,
					79.26329789082985,
					4867053.33278008,
					4788381.569294607,
					4714647.986721992,
					4553877.077912861,
					4288873.3947551865,
					4085146.6127842353,
					399725721.7900413,
					393108435.3423234,
					386981011.2900415,
					373336353.9900414,
					349340840.2344399,
					322983689.57344383,
					4921824.116182572,
					82.54294605809123,
					82.84481327800836,
					82.20580912863063,
					82.55000000000001,
					0.020539419087136926]

		std_240 = [1.6164319795148634,
					1.4838312484090586,
					1.2186160158823356,
					1.0190669276153697,
					1.8934974719243303,
					2.749420372154887,
					2688463.7919470696,
					2105218.5063895546,
					1695490.029971322,
					1129261.8643741924,
					840277.8666956322,
					335469.017088102,
					216288535.15894964,
					168499904.72586522,
					136057476.0253636,
					91488431.23755461,
					71293365.27171491,
					33696648.107421584,
					3955284.056165754,
					1.6807153837710944,
					1.7057513210184805,
					1.7358737799975517,
					1.7349051366957609,
					0.6677725095280036]

		state[:24] = [(a - b) / c for a, b, c in zip(state[:24], mean_240, std_240)]
		#print(state)

		# 讀取240天的參數
		param = OrderedDict([('fc1.weight', tensor([[ 1.2716e-01, -1.8485e-01, -6.7747e-02,  1.1713e-01,  7.5792e-02,
          2.0208e-01, -7.0527e-02, -1.4184e-02,  9.4415e-02, -5.0212e-02,
          1.3677e-01,  2.1804e-02,  6.7265e-02,  1.2520e-01,  3.5133e-02,
         -8.2393e-03,  1.3435e-01, -1.4316e-02,  2.8096e-04, -3.7840e-02,
          4.7085e-02, -1.4275e-01,  2.0445e-02,  1.1907e-01, -7.2593e-02,
         -1.2121e-01, -6.2846e-02, -6.8217e-02,  7.7435e-02,  4.8453e-02,
         -7.6490e-03, -1.0434e-01, -6.1740e-02,  1.9683e-01, -3.0223e-02,
          1.7942e-01,  1.7104e-01],
        [ 1.2844e-01, -1.4271e-01,  5.2874e-02,  1.9871e-01,  1.6538e-01,
          1.9506e-01, -6.3772e-02,  4.1825e-03,  1.2828e-01, -8.3694e-02,
         -1.2648e-01, -1.5659e-02, -1.6584e-01,  3.1474e-02, -2.4373e-01,
         -1.2453e-01, -1.1220e-01, -7.5889e-02, -1.6727e-02,  9.6145e-02,
         -4.4757e-02, -9.6042e-02,  5.3671e-02,  7.4038e-02,  1.8036e-01,
          5.1731e-02,  2.2354e-01,  9.2390e-02, -6.9665e-02, -1.8139e-03,
          4.1457e-02, -1.7347e-03, -1.1262e-01,  1.6819e-01, -1.1708e-01,
         -9.7184e-04, -1.2193e-01],
        [-7.1712e-02, -7.8478e-02,  1.5204e-01, -1.0754e-01,  9.0655e-03,
         -2.8436e-01, -5.5568e-02,  1.4353e-01,  1.6945e-01, -8.8820e-02,
          8.5303e-02, -9.1935e-02,  2.1596e-02, -1.8142e-01, -4.0304e-02,
         -5.1104e-02,  7.4851e-02,  4.2885e-03,  9.0155e-02,  4.7419e-02,
         -2.1670e-02,  2.0132e-01,  1.5466e-01, -2.4735e-01, -1.2094e-01,
          7.6801e-02,  3.1700e-02, -6.0524e-03,  9.0668e-03, -7.2538e-02,
         -2.4805e-02,  1.2810e-01, -8.4914e-03,  4.1384e-02, -2.3109e-02,
         -1.0064e-01,  8.8666e-02],
        [ 7.2104e-02,  5.9985e-02, -4.0436e-02, -8.6179e-02,  1.6255e-01,
         -1.2503e-02,  1.1114e-02, -5.9104e-03,  3.2623e-02,  6.9119e-04,
          6.5827e-02, -5.0567e-02,  1.5612e-02, -1.2606e-01,  8.0916e-02,
          8.6954e-02, -1.1621e-02, -1.6315e-01, -1.1398e-01,  3.0878e-02,
         -2.1584e-02, -5.0502e-02, -2.2356e-02, -4.2576e-02,  2.2953e-03,
         -9.5448e-02, -1.1986e-01, -7.2758e-02, -1.2737e-01, -1.1152e-02,
          1.5284e-01,  5.1752e-02,  9.2705e-02, -1.7429e-03, -1.2560e-01,
         -6.7167e-02, -5.4178e-02],
        [ 5.9803e-03,  7.8859e-02,  3.8802e-02, -1.3618e-01,  2.8533e-02,
         -5.3863e-02,  1.7730e-01,  5.2523e-02,  8.2312e-02,  1.3241e-02,
          8.7281e-03,  1.0404e-01, -6.3245e-02,  1.3182e-01,  1.6133e-01,
         -1.8258e-02, -1.2797e-01, -9.8168e-02, -2.2357e-01, -6.6477e-02,
          2.2070e-01,  3.3437e-02, -3.7229e-02, -2.4600e-01, -1.1879e-03,
          2.1991e-01, -2.2489e-01, -2.7936e-02,  2.5245e-02, -1.1152e-01,
         -8.5895e-02,  7.0207e-02,  6.2824e-02,  1.0364e-01, -3.6065e-02,
         -4.5111e-02, -1.3304e-01],
        [-5.0593e-02,  5.0614e-02, -3.3067e-02, -2.7911e-02, -2.5269e-02,
         -1.4990e-01, -1.4052e-01,  7.5520e-02,  1.0339e-01,  6.2124e-02,
         -7.6277e-02,  9.0592e-02,  2.9139e-02, -1.3795e-02,  1.1820e-01,
         -2.4563e-02,  1.5260e-01,  2.1028e-02,  5.7125e-02, -1.2196e-01,
          5.3365e-02,  1.1710e-01,  3.2212e-02,  6.0070e-02,  2.0056e-02,
         -1.0964e-01, -3.5928e-02, -9.7399e-02, -9.6465e-03,  1.7881e-02,
          5.2974e-02, -1.0206e-01,  2.8600e-02, -2.9951e-04, -2.2869e-02,
         -6.3654e-02, -1.1387e-01],
        [-8.4301e-02,  1.1995e-01,  1.4312e-01,  4.2062e-02, -8.0328e-02,
          3.8563e-02,  9.0384e-02, -5.3703e-02,  2.1081e-01,  6.0373e-02,
         -9.8746e-02, -1.5587e-02, -4.8893e-02, -4.6461e-02, -6.6252e-02,
         -1.9239e-03, -2.1120e-01,  1.6721e-01,  7.5026e-03, -2.3988e-02,
          2.6505e-02, -2.2394e-02, -8.0496e-02, -6.9688e-02, -1.2919e-01,
          4.4452e-02, -1.6011e-01, -1.0517e-01,  3.0878e-02, -4.7720e-03,
         -1.1343e-02, -8.1325e-03, -1.4939e-02, -5.7814e-02, -4.6269e-02,
         -1.3652e-01,  2.2047e-02],
        [-1.5524e-03,  1.4167e-01,  1.2939e-01, -1.6021e-01,  1.1695e-01,
         -2.8527e-02,  3.5568e-03, -3.9905e-02,  3.5446e-02,  2.4993e-02,
          7.8719e-03, -5.3194e-02,  6.6413e-03, -2.9669e-02, -1.4351e-01,
          6.3139e-02,  6.9451e-02, -1.1119e-02, -1.1135e-01, -2.2795e-02,
         -2.7174e-02, -8.1642e-02,  1.2911e-01,  5.1321e-02, -6.2271e-02,
          6.6402e-02, -3.2115e-02, -4.9162e-02, -7.9253e-02,  6.7960e-02,
         -8.8618e-03, -4.1077e-02,  5.1663e-02,  5.4818e-02,  7.0846e-02,
         -1.3577e-01, -1.1812e-01],
        [ 1.6073e-01, -6.1429e-02,  7.7241e-02, -1.0265e-01,  1.4455e-02,
         -8.2169e-02,  7.9792e-02,  1.2202e-01, -1.5888e-01, -1.7984e-01,
         -2.7057e-01, -2.0685e-01,  9.2075e-02,  2.7845e-02, -6.8021e-02,
          3.6433e-02, -2.6248e-01,  6.3518e-02,  1.0184e-01, -8.3166e-03,
         -1.7081e-01, -6.7469e-02, -1.7019e-02,  1.8791e-02, -6.6840e-02,
          1.1500e-01,  5.2831e-02,  8.2150e-02, -8.2348e-03,  1.9539e-01,
         -2.4997e-01,  1.9368e-01,  1.3708e-01,  3.3791e-03,  1.0598e-01,
          2.4652e-02,  1.3327e-02],
        [-7.0490e-02,  2.7483e-02, -2.5418e-01,  8.2198e-02, -2.0305e-02,
          1.5376e-03,  9.4023e-02, -1.1736e-02, -4.5681e-03, -2.4107e-02,
          5.6382e-02, -1.5908e-01, -3.5675e-03,  4.8251e-02, -3.8580e-02,
         -2.4006e-02, -1.3743e-01,  1.4365e-01, -6.2082e-03,  1.2607e-01,
          4.8396e-02, -1.2924e-01, -4.9700e-02, -1.7737e-02,  1.5159e-01,
         -6.6448e-02, -9.6634e-02, -1.1606e-01,  9.6769e-02, -4.3276e-02,
          1.0148e-01, -1.3936e-01, -1.0412e-02, -6.4825e-02,  1.1931e-02,
         -2.8717e-02,  1.1280e-01]])), ('fc1.bias', tensor([-0.0979,  0.0232,  0.0027, -0.2018,  0.0697, -0.1511, -0.0023,  0.0780,
         0.1268,  0.0764])), ('out.weight', tensor([[ 0.1531,  0.0417,  0.0464,  0.0168,  0.0568, -0.0288, -0.0866,  0.0069,
          0.1780, -0.1465],
        [ 0.0155, -0.0258,  0.0529,  0.0122,  0.0437, -0.0198,  0.1627, -0.0461,
          0.0582, -0.1256]])), ('out.bias', tensor([-0.2030, -0.1075]))])


	#abs_path = os.path.join(os.path.dirname(os.path.realpath(__file__)), 'params_top50Return_Linear.pkl')
	#param_list50 = torch.load('params_top50Return_Linear.pkl')
	#param_list50 = torch.load('abs_path')

	"""
	param = OrderedDict([('fc1.weight',
							tensor([[ 0.1158, -0.0988,  0.0720,  0.2408,  0.0421, -0.1349, -0.0247, -0.0283],
											[ 0.0687, -0.0295, -0.1720, -0.1260, -0.3383, -0.1223, -0.0508,  0.0681],
											[-0.0600, -0.0783,  0.0301, -0.0246, -0.1391,  0.1548,  0.0292, -0.1311],
											[-0.0360, -0.0857,  0.0505,  0.2222, -0.1010, -0.1674,  0.0695, -0.1696],
											[-0.0989,  0.0587, -0.0901, -0.0404, -0.0952,  0.1623,  0.0679,  0.0023],
											[-0.1824,  0.0544, -0.1328,  0.1459, -0.1539, -0.0407,  0.0618,  0.0925],
											[-0.0017,  0.1142, -0.2593, -0.0378,  0.1240,  0.2351,  0.2373,  0.0864],
											[ 0.0843,  0.1238, -0.1252, -0.1437, -0.0084,  0.1250, -0.0294,  0.0134],
											[-0.0741, -0.0639,  0.0489, -0.0714, -0.1792,  0.0922,  0.0653,  0.0888],
											[ 0.0849, -0.0864,  0.0608,  0.2027, -0.1749, -0.1271, -0.1926, -0.0327]])),
						 ('fc1.bias',
							tensor([ 0.1649, -0.2401, -0.1918,  0.3311, -0.1392,  0.0695, -0.1101, -0.2536,
											-0.3651, -0.3548])),
						 ('out.weight',
							tensor([[ 0.1298,  0.0655, -0.0123,  0.1892, -0.1207,  0.2288, -0.0091, -0.0593,
												0.0410,  0.0045],
											[-0.0851,  0.1379, -0.0819,  0.0264, -0.0631,  0.0217,  0.0781,  0.0360,
												0.0648,  0.0026]])),
						 ('out.bias', tensor([-0.1241, -0.0462]))])
	"""


	ddqn = Net()
	ddqn.load_state_dict(param)
	action = ddqn.choose_action(state)
	return action
	
def makeDecision(position, action):
	#print(position, action)
	if position == 0:
		if action == 0:
			decision = '等待'
		else:
			decision = '買入'
	else:
		if action == 0:
			decision = '持有'
		else:
			decision = '賣出'
	#print(decision)
	return decision